package com.example.myfirstapp;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.List;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;

public class MainActivity extends Activity {
	public final static String EXTRA_MESSAGE = "com.example.myfirstapp.MESSAGE";
	private Socket client;
	 private FileInputStream fileInputStream;
	 private BufferedInputStream bufferedInputStream;
	 private OutputStream outputStream;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.activity_main);
        
        //StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        //StrictMode.setThreadPolicy(policy); 
        
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    /** Called when the user clicks the Send button 
     * @throws Exception */
    public void sendMessage(View view) throws Exception {
    	String inputs="genuine";
    	Intent intent = new Intent(this, DisplayMessageActivity.class);
    	EditText editText = (EditText) findViewById(R.id.edit_message);
    	String message = editText.getText().toString();
   
    	ActivityManager am = (ActivityManager)this.getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningAppProcessInfo> pidsTask = am.getRunningAppProcesses();
        List<ActivityManager.RunningAppProcessInfo> pids = am.getRunningAppProcesses();
        int pid = 0;

      /*       for(int i = 0; i < pidsTask.size(); i++){
                     message+=pidsTask.get(i).processName+"\n"; */
       /* for (int i = 0; i < pidsTask.size(); i++) {
        	ActivityManager.RunningAppProcessInfo info = pidsTask.get(i);
        	if((pidsTask.get(i).processName).contentEquals("com.example.android.fragments")) {
        		pid = info.pid;
            }
        }
        message = "" + pid;
        
        ProcessBuilder pb = new ProcessBuilder();
        pb.command("strace", "-p 21311");
        Process p = pb.start();
        
        InputStream inputStream = p.getErrorStream();
        int c;
                 while ((c = inputStream.read()) != -1) {
                     message += (char) c;
                 }
        
        //message = "" + p;
       
        //Runtime.getRuntime().exec("strace -p 381 -o /mnt/sdcard/proc_system");
        //int len = 0;
        //while (len == 0) {
        //	Runtime.getRuntime().exec("strace -p" + pid + "-o /mnt/sdcard/Straceout_" + pid);
        //    File f = new File("/mnt/sdcard/Straceout_" + pid);
        //    len = (int) f.length();
        //}
                      */
          for(int i = 0; i < pids.size(); i++)
          { 
        	 ActivityManager.RunningAppProcessInfo info = pids.get(i);
             if((pids.get(i).processName).contentEquals("com.example.android.fragments"))     
             {  
            	// message = "" + info.pid;
                 pid = info.pid;
                 //message = info.processName;
                 String cmd="strace -p "+pid+" -o /mnt/sdcard/traceFileSD_"+pid+".txt";
                 Runtime.getRuntime().exec(cmd);
                 
              }
                  
           }
    
    	StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();

    	StrictMode.setThreadPolicy(policy); 
           	try {
                 	Socket s = new Socket("10.0.2.2", 50001); 
                 	
                 	File myFile = new File("/mnt/sdcard/traceFileSD_"+pid+".txt");  
                    FileInputStream fIn = new FileInputStream(myFile);
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(fIn));  
                    
                    String aDataRow = "";  
                    String aBuffer = "";
                      
                    while ((aDataRow = myReader.readLine()) != null) {  
                        aBuffer += aDataRow + "\n";  
                    }  
                    
                 	if (s.isConnected() == true) {
                 		message = "connected";
                 	} else message = "not connected";
                 	OutputStream out = s.getOutputStream();
                 	PrintWriter output = new PrintWriter(out);
                 	output.println("hello");
                 	output.flush();
                 	
                 	BufferedReader input = new BufferedReader(new InputStreamReader(s.getInputStream()));
                 	
                 	message="Application :com.example.fragments is ";
                 	message += inputs;
                 	s.close();
                 	myReader.close();  
                 } catch (UnknownHostException e) {
                 	e.printStackTrace();
                 } catch (IOException e) {
                 	e.printStackTrace();
                 }
         
           
           //mo networking
    	
    	/*File myFile = new File ("/mnt/sdcard/traceFileSD_3883");
    	FileInputStream fis = new FileInputStream(myFile);
    	Socket socket = null;
		OutputStream os = socket.getOutputStream();
    	int filesize = (int) myFile.length();

    	byte [] buffer  = new byte [filesize];
    	     int bytesRead =0;
    	     while ((bytesRead = fis.read(buffer)) > 0) {
    	     os.write(buffer, 0, bytesRead);
    	//Log display exact the file size
    	     System.out.println("SO sendFile" + bytesRead);
    	     }
    	     os.flush();
    	     os.close();
    	     fis.close();
    	     Log.d("Client", "Client sent message");
    	     socket.close();
        */
          
        
    
    //	int processID= android.os.Process.myPid();
    //	String cmd="strace -p "+processID+" -o /mnt/sdcard/traceFileSD_"+processID+".txt";
     //  Runtime.getRuntime().exec(cmd);
    	

    /*	String sFileName="ghh";
				 String sBody="htjhj";
    	try
        {
            File root = new File(Environment.getExternalStorageDirectory(), "Notes");
            if (!root.exists()) {
                root.mkdirs();
            }
            File gpxfile = new File(root, sFileName);
            FileWriter writer = new FileWriter(gpxfile);
            writer.append(sBody);
            writer.flush();
            writer.close();
            Toast.makeText(this, "Saved", Toast.LENGTH_SHORT).show();
        }
        catch(IOException e)
        {
             e.printStackTrace();
            // importError = e.getMessage();
          //   iError();
        } */
    	
    	//ActivityManager m = (ActivityManager)this.getSystemService(ACTIVITY_SERVICE);
    	//Get some number of running tasks and grab the first one.  getRunningTasks returns newest to oldest
    	//RunningTaskInfo task = m.getRunningTasks(1).get(0);
       // ArrayList  list=new ArrayList();
        
        
    	//Build output
    	//String output  = "the last application you've executed is '"+task.id+"' and the PID is '"+task.baseActivity.toShortString()+"'";
    	//intent.putExtra(EXTRA_MESSAGE, output);
    	intent.putExtra(EXTRA_MESSAGE, message);
    	startActivity(intent);
    }
}



